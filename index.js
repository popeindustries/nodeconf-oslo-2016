/* generated by Buddy */
if (window._m_ == null) window._m_ = {};
if (window.require == null) {
  window.require = function require (id) {
    if (!_m_[id]) return;
    return (_m_[id].boot) ? _m_[id]() : _m_[id];
  };
}
var global = window.global = window;

(function (global) {
  var babelHelpers = global.babelHelpers = {};

  babelHelpers.classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  babelHelpers.createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  babelHelpers.defineProperty = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  babelHelpers.get = function get(object, property, receiver) {
    if (object === null) object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);

    if (desc === undefined) {
      var parent = Object.getPrototypeOf(object);

      if (parent === null) {
        return undefined;
      } else {
        return get(parent, property, receiver);
      }
    } else if ("value" in desc) {
      return desc.value;
    } else {
      var getter = desc.get;

      if (getter === undefined) {
        return undefined;
      }

      return getter.call(receiver);
    }
  };

  babelHelpers.inherits = function (subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  };

  babelHelpers.possibleConstructorReturn = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  };

  babelHelpers.taggedTemplateLiteral = function (strings, raw) {
    return Object.freeze(Object.defineProperties(strings, {
      raw: {
        value: Object.freeze(raw)
      }
    }));
  };
})(typeof global === "undefined" ? self : global);
_m_['src/index.js']=(function(module,exports){
  module=this;exports=module.exports;

  'use strict';
  
  var elSlides = document.querySelector('.slides');
  var isProduction = undefined == 'production';
  var isNotes = window.name == 'notes';
  var startingSlide = isProduction ? 0 : getUrlSlide();
  var startingNote = 0;
  var model = window.model = parse({
    notes: [],
    noteIndex: 0,
    notesWindow: null,
    slides: [],
    slideIndex: 0,
    stepIndex: 0,
    stepTotal: 0
  });
  
  /**
   * Parse slide elements
   * @param {Object} model
   * @returns {Array}
   */
  function parse(model) {
    model.slides = Array.prototype.slice.call(elSlides.children).filter(function (element) {
      return element.tagName == 'HEADER' || element.tagName == 'SECTION';
    });
    if (isNotes) {
      model.notes = model.slides.reduce(function (notes, element, idx) {
        if (startingSlide == idx) startingNote = notes.length;
        return notes.concat(Array.prototype.slice.call(element.querySelectorAll('.note')));
      }, []);
    }
  
    return model;
  }
  
  /**
   * Open notes window
   */
  function openNotes() {
    if (!isProduction) model.notesWindow = window.open(window.location.href, 'notes');
  }
  
  /**
   * Display slide at 'slideIndex'
   * @param {Nunber} slideIndex
   */
  function changeSlide(slideIndex) {
    var back = slideIndex < model.slideIndex;
    var current = model.slides[model.slideIndex];
    var next = model.slides[slideIndex];
  
    model.stepTotal = parseInt(next.dataset.steps, 10) || 0;
    model.stepIndex = back ? model.stepTotal : 0;
  
    next.classList.add('show');
    next.classList.remove('hide');
    next.style.zIndex = 100 - slideIndex;
    if (current && next != current) {
      current.classList.add('hide');
      current.addEventListener('transitionend', onTransitionEnd, false);
    }
    model.slideIndex = slideIndex;
    changeStep(model.stepIndex);
    window.history.pushState({}, '', window.location.pathname.replace(/\/\d*$/, '/' + slideIndex));
  }
  
  /**
   * Display step at 'stepIndex'
   * @param {Nunber} stepIndex
   */
  function changeStep(stepIndex) {
    var slide = model.slides[model.slideIndex];
    var classStr = slide.getAttribute('class').replace(/\s?step-\d\s?/g, '');
  
    for (var i = 1; i <= stepIndex; i++) {
      classStr += ' step-' + i;
    }
    slide.setAttribute('class', classStr);
    model.stepIndex = stepIndex;
  }
  
  /**
   * Display note at 'noteIndex'
   * @param {Number} noteIndex
   */
  function changeNote(noteIndex) {
    var current = model.notes[model.noteIndex];
    var next = model.notes[noteIndex];
  
    if (current) current.style.opacity = 0;
    if (next) next.style.opacity = 1;
    model.noteIndex = noteIndex;
  }
  
  /**
   * Advance to next step/slide/note
   * @returns {null}
   */
  function next() {
    if (isNotes) return changeNote(model.noteIndex + 1);
    if (model.stepTotal && model.stepIndex + 1 <= model.stepTotal) {
      changeStep(model.stepIndex + 1);
    } else if (model.slideIndex + 1 < model.slides.length) {
      changeSlide(model.slideIndex + 1);
    } else {
      return;
    }
    if (model.notesWindow) model.notesWindow.next();
  }
  
  /**
   * Advance to previous step/slide/note
   * @returns {null}
   */
  function prev() {
    if (isNotes) return changeNote(model.noteIndex - 1);
    if (model.stepTotal && model.stepIndex - 1 >= 0) {
      changeStep(model.stepIndex - 1);
    } else if (model.slideIndex - 1 >= 0) {
      changeSlide(model.slideIndex - 1);
    } else {
      return;
    }
    if (model.notesWindow) model.notesWindow.prev();
  }
  
  /**
   * Get current slide index from url
   * @returns {Number}
   */
  function getUrlSlide() {
    var slide = window.location.pathname.split('/').slice(-1)[0];
  
    return parseInt(slide, 0) || 0;
  }
  
  /**
   * Handle key down
   * @param {Event} evt
   */
  function onKeyDown(evt) {
    var key = (evt.key || evt.keyIdentifier).toLowerCase();
  
    if (key === 'arrowright' || key === 'arrowup' || key === 'right' || key === 'up' || key === 'pagedown') {
      next();
    }
    if (key === 'arrowleft' || key === 'arrowdown' || key === 'left' || key === 'down' || key === 'pageup') {
      prev();
    }
    if (key === 'n') openNotes();
  }
  
  /**
   * Handle pop state event
   * @param {Event} evt
   */
  function onPopState(evt) {
    if (evt.state) changeSlide(getUrlSlide());
  }
  
  /**
   * Handle transition end event
   * @param {Event} evt
   */
  function onTransitionEnd(evt) {
    var slide = evt.target;
  
    slide.removeEventListener('transitionend', onTransitionEnd, false);
  
    if (slide.classList.contains('hide') && slide.classList.contains('show')) {
      slide.classList.remove('show');
      slide.style.zIndex = null;
    }
  }
  
  if (!isNotes) {
    document.addEventListener('keyup', onKeyDown, false);
    window.addEventListener('popstate', onPopState, false);
    window.history.replaceState({}, document.title, window.location.pathname);
    hljs.initHighlightingOnLoad();
  
    changeSlide(startingSlide);
  } else {
    window.next = next;
    window.prev = prev;
    document.documentElement.classList.add('presentation-notes');
  
    changeNote(startingNote);
  }

  return module.exports;
}).call({exports:{}});